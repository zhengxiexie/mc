

你好，这里我贴出了四个项目，第一个项目是由于之前百度底层通讯用的epoll模型，好奇就写了一个epoll的简单例子，第二个项目是目前
公司做的对数据库加密解密的实现，第三个项目是业余时间做的视频分发项目，第四个项目是抓取优酷视频的代码。

一、关于epoll的实现
请见 https://github.com/zhengxiexie/epoll_server_and_client/blob/master/server.c

二、加密与解密
简介：中国移动由于发生过几次严重的用户信息泄露事件，集团定出规范，要求对数据库的敏感字段全部加密，也就是说数据库只存
密文，上层应用必须通过一层代理对数据库入密文，读明文，这层代理也就是我所做的，后台采用C语言编写，编译成动态库自定义函数，
加密解密性能极高，2000万行数据只需4分钟，下面我把一些关键代码罗列出来。

在数据库主函数里，这行代码代表正式进入加密过程，plain代表明文指针，cipher代表密文指针。
if ((ret = do_encrypt(ctx, plain, cipher))) die(ret);

支持的加密方法不只一种，crypto_func * 代表指向具体加密函数的指针，
ctx_new_func * 代表初始化环境，也就是从数据库中获取密钥, 这里一共有stream/shift/map/AES/3DES/DES
/RC4各种算法。
typedef int crypto_func(void * ctx, const uint8_t * in, size_t in_len, uint8_t * out);

static const struct  crypto_t {
    const char * name;
    ctx_new_func  * ctx_new;
    ctx_free_func * ctx_free;
    crypto_func   * enc_func;
    crypto_func   * dec_func;
} crypto_methods[] = {
    {"stream", basic_init,   basic_free,   stream_cipher, stream_cipher},
    {"shift",  basic_init,   basic_free,   shift_encrypt, shift_decrypt},
    {"map",    map_ctx_init, basic_free,   map_encrypt,   map_decrypt},
    {"AES",    EVP_ctx_init, EVP_ctx_free, encrypt_aes,   decrypt_aes},
    {"3DES",   EVP_ctx_init, EVP_ctx_free, encrypt_3des,  decrypt_3des},
    {"DES",    EVP_ctx_init, EVP_ctx_free, encrypt_des,   decrypt_des},
    {"RC4",    EVP_ctx_init, EVP_ctx_free, encrypt_rc4,   decrypt_rc4},
    {NULL, NULL, NULL, NULL, NULL}, // only chaos beyond this fine line
};

具体的加密函数，这里只举出一个例子，一般加密，采用密文和密钥的逐个字节异或的方式。
static int stream_cipher(void * ctx, const uint8_t * in, size_t in_len, uint8_t * out)
{
    int p = 0, pk = 0;
    uint8_t * key = (uint8_t *) ctx;
    for (p = pk = 0; p < in_len; p++, pk++)
    {
	if (pk == KEY_SIZE) {
	    pk = 0;
	}
	out[p] = in[p] ^ key[pk];
    }
    out[p] = 0;
    return p;
}

加密完之后，返给数据库。
void gen_pgtext(text * what, char *p)
{
    memcpy((void *)VARDATA(what), (void*)p, strlen(p));
    SET_VARSIZE(what, strlen(p));
}

三、视频分发项目
业余时间自学了python语言以及tornado框架，半年时间内开发了这个项目，目前每天活跃用户100，累计用户数
1200。

主文件, tornado最大的特点是异步非阻塞，但考虑到初期项目用户数并不多，一个mysql数据库完全能撑住，就
没有用到这个特点。

class MainHandler(JsonHandler):
    def post(self):
	# 公共上行
	tag = self.request.arguments['tag']
	version = self.request.arguments['version']
	os = self.request.arguments['os']
	imei = self.request.arguments['imei']

	# 公共下行, 一旦出错，具体方法会覆盖参数
	self.response['errorcode'] = 0
	self.response['errormsg'] = "right"
	self.response['tag'] = tag
	self.response['accept_time'] = tools.accept_time()

	# 根据具体的tag直接映射到具体的函数接口处理
	function_map[tag](self.request, self.response)
	self.write_json()

def main():
    tornado.options.parse_command_line()
    application = tornado.web.Application([
        (r"/", MainHandler),
    ])
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
    global_init.init_album_id_name_map()
    main()


具体的function_map

function_map = {
"100":login,
"101":get_movie_list_index,
"103":get_movie_list_refresh,
"105":subscribe,
"106":unsubscribe,
"107":master_detail,
"110":subscribe_get_movie_list_index,
"104":detail_movie,
"102":movie_rank_list,
"117":movie_rank_list_new,
"115":movie_list_by_album,
"118":movie_list_by_class,
"116":movie_list_by_master_id,
"114":master_detail_new,
"113":master_rank_list,
"119":album_list_by_master,
"109":subscribe_master,
"112":update_count,
}

具体的接口，这个是根据专辑获取关联的所有视频信息

def movie_list_by_album(request, response):
    """tag115 获取专辑下属的视频"""
    tag = request.arguments['tag']
    uid = request.arguments['uid']
    page_number = request.arguments['page_number']
    page_count = request.arguments['page_count']
    album_id = request.arguments['series_id']
    logging.info('tag[%s] uid[%s] series_id[%s] page_count[%d] page_number[%s]', tag, uid, album_id, page_count, page_number )
    movie = Movie()
    r = movie.get_movie_list_by_album_id( uid, album_id, page_number, page_count)
    response['movie_list'] = r['movie_list']
    response['if_more'] = r['if_more']

整个项目最大的特点是，凡是涉及到mysql逻辑计算的，都会把id缓存住，对，也就是说，redis只存id，
因为mysql有索引，通过id查询其他属性是很快的。

def get_movie_list_by_album_id( self, uid, album_id, page_number, page_count ):
    """专辑的视频列表"""
    sort_id_redis = self.movie_module.movie_id_by_album_id(album_id)
    sort_id_str, if_more = GET_PAGE_SORT_ID(sort_id_redis, page_number, page_count)
    movie_list = self.movie_module.movie_list_by_movie_id_str(sort_id_str, uid)
    self.response['if_more'] = if_more
    self.response['movie_list'] = movie_list
    return self.response

四、抓取视频

根据文件个数起多个线程抓取
t_list = []
for i in range(page_num + 1):
    low = i * page_count
    high = i * page_count + page_count
    if high >= total_num:
	high = total_num
    n = '[%s]' % str(i)
    t = threading.Thread(target=parse_youku, name=n, args=(low, high))
    t.start()
    t_list.append(t)

for t in t_list:
    t.join()

具体的解析达人信息，全部用最蠢的正则表达式实现。
def parse_master(url, name, master_movie_file):
    master_name, brief, logo, play_count, fans_count, movie_count = ('', '', '', '', '', '')
    rand_user_agent = random.choice(user_agent.user_agent)
    opener = urllib2.build_opener()
    opener.addheaders = [('User-agent', rand_user_agent), ('X-Forwarded-For', rand_user_agent)]
    try:
	response = opener.open(url)
    except:
	return None

    data = response.read()
    res = re.search( r'<div class="cert-list">.*?<div class="username">.*?>(.*?)</a>', data, re.S )
    if res:
	master_name = res.group(1)
    res = re.search( r'<div class="cert-txt">(.*?)</div>', data, re.S )
    if res:
	brief = res.group(1)
	brief = brief.replace(u"\r\n", r"").strip()
    res = re.search( r'"YK-aside".*?src="(.*?)"', data, re.S )
    if res:
	logo = res.group(1)
    res = re.search( r'"vnum".*?<em>(.*?)</em>', data, re.S )
    if res:
	play_count = res.group(1)
	play_count = play_count.replace(',','')
    res = re.search( r'"snum".*?<em.*?>(.*?)</em>', data, re.S )
    if res:
	fans_count = res.group(1)
	fans_count = fans_count.replace(',','')

    rand_user_agent = random.choice(user_agent.user_agent)
    opener = urllib2.build_opener()
    opener.addheaders = [('User-agent', rand_user_agent), ('X-Forwarded-For', rand_user_agent)]

    time.sleep(3)

    video_url = url + '/videos'
    try:
	response = opener.open(video_url)
    except:
	return None

    data = response.read()

    res = re.search( '>共(.*?)个视频', data, re.S )
    if res:
	movie_count = res.group(1)
	movie_count = movie_count.replace(',', '')

    line = "`%s` `%s` `%s` `%s` `%s` `%s` `%s` `%s`\n" % ( 'youku', name, brief, logo, fans_count, movie_count, play_count, url )
    logging.info('%s', line)
    master_movie_file.write(line)
    return data #返回以便后面parse_page_video使用
